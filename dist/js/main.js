"use strict";

jQuery(function () {
  //// Navbar
  $(".nav-link").on("click", function () {
    // 1) Remove class show when click link
    $(this).parentsUntil("navbar-collapse").removeClass("show");
    // 2) Get name id section
    var getIdSection = $(this).data("section");
    // 3) Got to section
    $("html, body").animate({
      scrollTop: $("#" + getIdSection).offset().top
    }, 1000);
  });

  //
  var getDirPage = $("html").attr("dir");

  // Header slider
  $(".header__slider, .testimonial").slick({
    infinite: false,
    slidesToShow: 1,
    slidesToScroll: 1,
    autoplay: true,
    autoplaySpeed: 5000,
    arrows: true,
    rtl: $("html").attr("dir") === "rtl" ? true : false,
    prevArrow: "<svg class='a-left control-c prev slick-prev'>\n    <use xlink:href=\"../icons/sprite.svg#icon-Angle-Left\">\n    </svg>",
    nextArrow: "<svg class='a-right control-c next slick-next'>\n    <use xlink:href=\"../icons/sprite.svg#icon-Angle-Right\">\n    </svg>"
  });

  // Blog slider
  $(".blog__article").slick({
    infinite: false,
    slidesToShow: 2,
    slidesToScroll: 2,
    autoplay: true,
    autoplaySpeed: 5000,
    dots: true,
    arrows: false,
    appendDots: $(".placeholder"),
    responsive: [{
      breakpoint: 600,
      settings: {
        slidesToShow: 1,
        slidesToScroll: 1,
        dots: false
      }
    }],
    rtl: $("html").attr("dir") === "rtl" ? true : false
  });

  // Section gallery
  $(".our-works__btn-gallery .btn").on("click", function () {
    // 1) Get id when click the button
    var classSelect = $(this).data("select");
    // 2) Add class active on select button then remove class active from all siblings
    $(this).addClass("active").siblings().removeClass("active");
    // 3) Filter with all images
    $(".our-works__gallery__image").filter(function (i, cur) {
      $(cur).hasClass(classSelect) ? $(cur).removeClass("opacity") : $(cur).addClass("opacity");
    });
  });

  // Scroll document
  $(document).on("scroll", function () {
    // Each for all sections
    $("body section").each(function () {
      // 1) Get id section
      var idSection = $(this).attr("id");
      // 2) Check if scroll top greather than or equal this section
      if ($(document).scrollTop() >= $(this).offset().top) {
        // 3) Finaly filter on all nav link and check if this section data section equal section above scroll top
        $(".nav-link").filter(function () {
          $(this).data("section") == idSection ? $(this).addClass("active-link") : $(this).removeClass("active-link");
        });
      }
    });

    //
    var getSectionAbout = $("#about-us").offset().top;
    //
    $(document).scrollTop() >= getSectionAbout ? $("#scrollUp").addClass("fadeIn") : $("#scrollUp").removeClass("fadeIn");
  });

  // Scroll up document
  $("#scrollUp").on("click", function () {
    $("html, body").animate({
      scrollTop: 0
    }, 1000);
  });

  // Change direction page
  $(".change_lang").on("change", function () {
    // 1) Get lang when change lang
    var getLang = $(this).val().replace("#", "");
    // 2)
    if (getLang === "ar") {
      $("html").attr({ dir: "rtl", lang: "ar" });
    } else {
      $("html").attr({ dir: "ltr", lang: "en" });
    }
    //
    $(".slick-slider").addClass("direction-ltr");
  });

  //
  // All images
  var allImages = $("[data-src]");

  // Preload image
  function preloadImages(img) {
    var src = $(img).data("src");

    if (!src) return;

    img.src = src;

    $(img).removeAttr("data-src");
  }

  //
  var ImageObServer = new IntersectionObserver(function (entries, ImageObServer) {
    $(entries).each(function (i, cur) {
      if (!cur.isIntersecting) {
        cur.target.classList.add("fadeOut");
        return;
      } else {
        //
        preloadImages(cur.target);
        cur.target.classList.remove("fadeOut");
        cur.target.classList.add("fadeIn");
        ImageObServer.unobserve(cur.target);
      }
    });
  }, {
    threshold: 0
  });

  //
  allImages.each(function (i, cur) {
    return ImageObServer.observe(cur);
  });
});
"use strict";

// TRANSLATING
function translating(_ref) {
  var _ref$changeLang = _ref.changeLang,
      changeLang = _ref$changeLang === undefined ? ".change_lang" : _ref$changeLang,
      _ref$classParentTrans = _ref.classParentTrans,
      classParentTrans = _ref$classParentTrans === undefined ? ".translate" : _ref$classParentTrans,
      objTranslate = _ref.objTranslate,
      _ref$langStartLoad = _ref.langStartLoad,
      langStartLoad = _ref$langStartLoad === undefined ? "ar" : _ref$langStartLoad,
      _ref$statusLocalStora = _ref.statusLocalStorage,
      statusLocalStorage = _ref$statusLocalStora === undefined ? false : _ref$statusLocalStora;

  // ALL VARIABLES
  var btnLang = document.querySelector(changeLang);

  // CHANGE DIR AND LANG
  function changeSomeMeta(lang) {
    if (lang == "ar") {
      document.dir = "rtl";
      // document.body.classList.add("arabic");
    } else {
      document.dir = "ltr";
      // document.body.classList.remove("arabic");
    }
    document.lang = lang;
  }

  // ADD EVENT LISTENER WILL BE CHANGE LANGUAGE
  btnLang.addEventListener("change", function () {
    // IF BTN NOT EQUAL HASH WILL BE STOP FUNCTION IF NOT WILL BE RUNINNG ALL ACTIONS INTO FUNCTION
    // TEXT BTN
    var textBtn = this.value.replace("#", "");
    console.log(textBtn);

    // RUNINNG CHANGE SOME META
    changeSomeMeta(textBtn);
    // RUNINNG SET LOCAL STORAGE
    // setLocalStorage(textBtn);
    //
    // location.href = `#${textBtn}`;
    location.reload();
  });

  // EVENT LISTENER EVENT HASH CHANGE WILL BE CHANGE HASH
  window.addEventListener("hashchange", function (e) {
    // VAR RETURN NEW HASH
    var newUrl = e.newURL.split("#").pop();
    // console.log(newUrl);
    // translating({ langStartLoad: newUrl, statusLocalStorage: true });
  });

  // LOCAL STORAGE
  function setLocalStorage(newLang) {
    // IF STATUS LOCAL STORAGE EQUAL TRUE WILL BE SET LOCAL STORAGE
    if (statusLocalStorage) localStorage.setItem("language", newLang);
  }

  //
  // (function () {
  //   let setLang = null;
  //   //
  //   if (statusLocalStorage) {
  //     let getLocalStorage = localStorage.getItem("language");
  //     setLang = `#${getLocalStorage}`;
  //   } else {
  //     setLang = `#${langStartLoad}`;
  //   }

  //   btnLang.value = setLang;

  //   // btnLang.dispatchEvent(new Event("change"));

  //   // // RUNINNG CHANGE SOME META
  //   // changeSomeMeta(setLang.replace("#", "").trim());
  //   // //
  //   // setLocalStorage(setLang.replace("#", "").trim());
  //   // // RUNINNG TRANSLATE ELEMENT
  //   // translateElement(classParentTrans, objTranslate, setLang);
  //   // //
  //   // location.href = `${setLang}`;
  // })();
}

// translating({});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
